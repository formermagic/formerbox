"""
This type stub file was generated by pyright.
"""

from typing import List, Optional, Tuple
from .file_utils import add_start_docstrings, is_sentencepiece_available
from .tokenization_utils import BatchEncoding
from .tokenization_utils_base import PREPARE_SEQ2SEQ_BATCH_DOCSTRING
from .tokenization_utils_fast import PreTrainedTokenizerFast
from .utils import logging
from .tokenization_t5 import T5Tokenizer

"""
This type stub file was generated by pyright.
"""
if is_sentencepiece_available():
    ...
else:
    T5Tokenizer = None
logger = logging.get_logger(__name__)
VOCAB_FILES_NAMES = { "vocab_file": "spiece.model","tokenizer_file": "tokenizer.json" }
PRETRAINED_VOCAB_FILES_MAP = { "vocab_file": { "t5-small": "https://s3.amazonaws.com/models.huggingface.co/bert/t5-spiece.model","t5-base": "https://s3.amazonaws.com/models.huggingface.co/bert/t5-spiece.model","t5-large": "https://s3.amazonaws.com/models.huggingface.co/bert/t5-spiece.model","t5-3b": "https://s3.amazonaws.com/models.huggingface.co/bert/t5-spiece.model","t5-11b": "https://s3.amazonaws.com/models.huggingface.co/bert/t5-spiece.model" },"tokenizer_file": { "t5-small": "https://s3.amazonaws.com/models.huggingface.co/bert/t5-tokenizer.json","t5-base": "https://s3.amazonaws.com/models.huggingface.co/bert/t5-tokenizer.json","t5-large": "https://s3.amazonaws.com/models.huggingface.co/bert/t5-tokenizer.json","t5-3b": "https://s3.amazonaws.com/models.huggingface.co/bert/t5-tokenizer.json","t5-11b": "https://s3.amazonaws.com/models.huggingface.co/bert/t5-tokenizer.json" } }
PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES = { "t5-small": 512,"t5-base": 512,"t5-large": 512,"t5-3b": 512,"t5-11b": 512 }
class T5TokenizerFast(PreTrainedTokenizerFast):
    """
    Construct a "fast" T5 tokenizer (backed by HuggingFace's `tokenizers` library). Based on `SentencePiece
    <https://github.com/google/sentencepiece>`__ .

    This tokenizer inherits from :class:`~transformers.PreTrainedTokenizerFast` which contains most of the main
    methods. Users should refer to this superclass for more information regarding those methods.

    Args:
        vocab_file (:obj:`str`):
            `SentencePiece <https://github.com/google/sentencepiece>`__ file (generally has a `.spm` extension) that
            contains the vocabulary necessary to instantiate a tokenizer.
        eos_token (:obj:`str`, `optional`, defaults to :obj:`"</s>"`):
            The end of sequence token.

            .. note::

                When building a sequence using special tokens, this is not the token that is used for the end
                of sequence. The token used is the :obj:`sep_token`.
        unk_token (:obj:`str`, `optional`, defaults to :obj:`"<unk>"`):
            The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
            token instead.
        pad_token (:obj:`str`, `optional`, defaults to :obj:`"<pad>"`):
            The token used for padding, for example when batching sequences of different lengths.
        extra_ids (:obj:`int`, `optional`, defaults to 100):
            Add a number of extra ids added to the end of the vocabulary for use as sentinels.
            These tokens are accessible as "<extra_id_{%d}>" where "{%d}" is a number between 0 and extra_ids-1.
            Extra tokens are indexed from the end of the vocabulary up to beginnning ("<extra_id_0>" is the last token
            in the vocabulary like in T5 preprocessing see `here
            <https://github.com/google-research/text-to-text-transfer-transformer/blob/9fd7b14a769417be33bc6c850f9598764913c833/t5/data/preprocessors.py#L2117>`__).
        additional_special_tokens (:obj:`List[str]`, `optional`):
            Additional special tokens used by the tokenizer.
    """
    vocab_files_names = ...
    pretrained_vocab_files_map = ...
    max_model_input_sizes = ...
    model_input_names = ...
    slow_tokenizer_class = ...
    def __init__(self, vocab_file, tokenizer_file=..., eos_token=..., unk_token=..., pad_token=..., extra_ids=..., additional_special_tokens=..., **kwargs) -> None:
        ...
    
    def save_vocabulary(self, save_directory: str, filename_prefix: Optional[str] = ...) -> Tuple[str]:
        ...
    
    def build_inputs_with_special_tokens(self, token_ids_0: List[int], token_ids_1: Optional[List[int]] = ...) -> List[int]:
        """
        Build model inputs from a sequence or a pair of sequence for sequence classification tasks
        by concatenating and adding special tokens.
        A sequence has the following format:

        - single sequence: ``X </s>``
        - pair of sequences: ``A </s> B </s>``

        Args:
            token_ids_0 (:obj:`List[int]`):
                List of IDs to which the special tokens will be added.
            token_ids_1 (:obj:`List[int]`, `optional`):
                Optional second list of IDs for sequence pairs.

        Returns:
            :obj:`List[int]`: List of `input IDs <../glossary.html#input-ids>`__ with the appropriate special tokens.
        """
        ...
    
    @add_start_docstrings(PREPARE_SEQ2SEQ_BATCH_DOCSTRING)
    def prepare_seq2seq_batch(self, src_texts: List[str], tgt_texts: Optional[List[str]] = ..., max_length: Optional[int] = ..., max_target_length: Optional[int] = ..., padding: str = ..., return_tensors: str = ..., truncation: bool = ..., **kwargs) -> BatchEncoding:
        ...
    


