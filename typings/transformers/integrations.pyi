"""
This type stub file was generated by pyright.
"""

from .trainer_callback import TrainerCallback
from .trainer_utils import BestRun
from .utils import logging

logger = logging.get_logger(__name__)
def is_wandb_available():
    ...

def is_comet_available():
    ...

def is_tensorboard_available():
    ...

def is_optuna_available():
    ...

def is_ray_available():
    ...

def default_hp_search_backend():
    ...

def run_hp_search_optuna(trainer, n_trials: int, direction: str, **kwargs) -> BestRun:
    ...

def run_hp_search_ray(trainer, n_trials: int, direction: str, **kwargs) -> BestRun:
    ...

class TensorBoardCallback(TrainerCallback):
    """
    A :class:`~transformers.TrainerCallback` that sends the logs to `TensorBoard
    <https://www.tensorflow.org/tensorboard>`__.

    Args:
        tb_writer (:obj:`SummaryWriter`, `optional`):
            The writer to use. Will instantiate one if not set.
    """
    def __init__(self, tb_writer=...) -> None:
        ...
    
    def on_init_end(self, args, state, control, **kwargs):
        ...
    
    def on_train_begin(self, args, state, control, **kwargs):
        ...
    
    def on_log(self, args, state, control, logs=..., **kwargs):
        ...
    
    def on_train_end(self, args, state, control, **kwargs):
        ...
    


class WandbCallback(TrainerCallback):
    """
    A :class:`~transformers.TrainerCallback` that sends the logs to `Weight and Biases
    <https://www.wandb.com/>`__.
    """
    def __init__(self) -> None:
        ...
    
    def setup(self, args, state, model):
        """
        Setup the optional Weights & Biases (`wandb`) integration.

        One can subclass and override this method to customize the setup if needed. Find more information
        `here <https://docs.wandb.com/huggingface>`__. You can also override the following environment variables:

        Environment:
            WANDB_WATCH (:obj:`str`, `optional` defaults to :obj:`"gradients"`):
                Can be :obj:`"gradients"`, :obj:`"all"` or :obj:`"false"`. Set to :obj:`"false"` to disable gradient
                logging or :obj:`"all"` to log gradients and parameters.
            WANDB_PROJECT (:obj:`str`, `optional`, defaults to :obj:`"huggingface"`):
                Set this to a custom string to store results in a different project.
            WANDB_DISABLED (:obj:`bool`, `optional`, defaults to :obj:`False`):
                Whether or not to disable wandb entirely.
        """
        ...
    
    def on_train_begin(self, args, state, control, model=..., **kwargs):
        ...
    
    def on_log(self, args, state, control, model=..., logs=..., **kwargs):
        ...
    


class CometCallback(TrainerCallback):
    """
    A :class:`~transformers.TrainerCallback` that sends the logs to `Comet ML
    <https://www.comet.ml/site/>`__.
    """
    def __init__(self) -> None:
        ...
    
    def setup(self, args, state, model):
        """
        Setup the optional Comet.ml integration.

        Environment:
            COMET_MODE (:obj:`str`, `optional`):
                "OFFLINE", "ONLINE", or "DISABLED"
            COMET_PROJECT_NAME (:obj:`str`, `optional`):
                Comet.ml project name for experiments
            COMET_OFFLINE_DIRECTORY (:obj:`str`, `optional`):
                Folder to use for saving offline experiments when :obj:`COMET_MODE` is "OFFLINE"

        For a number of configurable items in the environment,
        see `here <https://www.comet.ml/docs/python-sdk/advanced/#comet-configuration-variables>`__.
        """
        ...
    
    def on_train_begin(self, args, state, control, model=..., **kwargs):
        ...
    
    def on_log(self, args, state, control, model=..., logs=..., **kwargs):
        ...
    


