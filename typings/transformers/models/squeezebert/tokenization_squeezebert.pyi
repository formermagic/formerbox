"""
This type stub file was generated by pyright.
"""

from ...utils import logging
from ..bert.tokenization_bert import BertTokenizer

"""Tokenization classes for SqueezeBERT."""
logger = logging.get_logger(__name__)
VOCAB_FILES_NAMES = { "vocab_file": "vocab.txt" }
PRETRAINED_VOCAB_FILES_MAP = { "vocab_file": { "squeezebert/squeezebert-uncased": "https://huggingface.co/squeezebert/squeezebert-uncased/resolve/main/vocab.txt","squeezebert/squeezebert-mnli": "https://huggingface.co/squeezebert/squeezebert-mnli/resolve/main/vocab.txt","squeezebert/squeezebert-mnli-headless": "https://huggingface.co/squeezebert/squeezebert-mnli-headless/resolve/main/vocab.txt" } }
PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES = { "squeezebert/squeezebert-uncased": 512,"squeezebert/squeezebert-mnli": 512,"squeezebert/squeezebert-mnli-headless": 512 }
PRETRAINED_INIT_CONFIGURATION = { "squeezebert/squeezebert-uncased": { "do_lower_case": True },"squeezebert/squeezebert-mnli": { "do_lower_case": True },"squeezebert/squeezebert-mnli-headless": { "do_lower_case": True } }
class SqueezeBertTokenizer(BertTokenizer):
    r"""
    Constructs a SqueezeBert tokenizer.

    :class:`~transformers.SqueezeBertTokenizer is identical to :class:`~transformers.BertTokenizer` and runs end-to-end
    tokenization: punctuation splitting + wordpiece.

    Refer to superclass :class:`~transformers.BertTokenizer` for usage examples and documentation concerning
    parameters.
    """
    vocab_files_names = ...
    pretrained_vocab_files_map = ...
    max_model_input_sizes = ...
    pretrained_init_configuration = ...


