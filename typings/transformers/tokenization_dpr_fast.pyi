"""
This type stub file was generated by pyright.
"""

import collections
from typing import List, Optional, Union
from .file_utils import add_end_docstrings, add_start_docstrings
from .tokenization_bert_fast import BertTokenizerFast
from .tokenization_utils_base import BatchEncoding, TensorType
from .utils import logging

"""
This type stub file was generated by pyright.
"""
logger = logging.get_logger(__name__)
VOCAB_FILES_NAMES = { "vocab_file": "vocab.txt","tokenizer_file": "tokenizer.json" }
CONTEXT_ENCODER_PRETRAINED_VOCAB_FILES_MAP = { "vocab_file": { "facebook/dpr-ctx_encoder-single-nq-base": "https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt","facebook/dpr-ctx_encoder-multiset-base": "https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt" },"tokenizer_file": { "facebook/dpr-ctx_encoder-single-nq-base": "https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-tokenizer.json","facebook/dpr-ctx_encoder-multiset-base": "https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-tokenizer.json" } }
QUESTION_ENCODER_PRETRAINED_VOCAB_FILES_MAP = { "vocab_file": { "facebook/dpr-question_encoder-single-nq-base": "https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt","facebook/dpr-question_encoder-multiset-base": "https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt" },"tokenizer_file": { "facebook/dpr-question_encoder-single-nq-base": "https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-tokenizer.json","facebook/dpr-question_encoder-multiset-base": "https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-tokenizer.json" } }
READER_PRETRAINED_VOCAB_FILES_MAP = { "vocab_file": { "facebook/dpr-reader-single-nq-base": "https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt","facebook/dpr-reader-multiset-base": "https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt" },"tokenizer_file": { "facebook/dpr-reader-single-nq-base": "https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-tokenizer.json","facebook/dpr-reader-multiset-base": "https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-tokenizer.json" } }
CONTEXT_ENCODER_PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES = { "facebook/dpr-ctx_encoder-single-nq-base": 512,"facebook/dpr-ctx_encoder-multiset-base": 512 }
QUESTION_ENCODER_PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES = { "facebook/dpr-question_encoder-single-nq-base": 512,"facebook/dpr-question_encoder-multiset-base": 512 }
READER_PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES = { "facebook/dpr-reader-single-nq-base": 512,"facebook/dpr-reader-multiset-base": 512 }
CONTEXT_ENCODER_PRETRAINED_INIT_CONFIGURATION = { "facebook/dpr-ctx_encoder-single-nq-base": { "do_lower_case": True },"facebook/dpr-ctx_encoder-multiset-base": { "do_lower_case": True } }
QUESTION_ENCODER_PRETRAINED_INIT_CONFIGURATION = { "facebook/dpr-question_encoder-single-nq-base": { "do_lower_case": True },"facebook/dpr-question_encoder-multiset-base": { "do_lower_case": True } }
READER_PRETRAINED_INIT_CONFIGURATION = { "facebook/dpr-reader-single-nq-base": { "do_lower_case": True },"facebook/dpr-reader-multiset-base": { "do_lower_case": True } }
class DPRContextEncoderTokenizerFast(BertTokenizerFast):
    r"""
    Construct a "fast" DPRContextEncoder tokenizer (backed by HuggingFace's `tokenizers` library).

    :class:`~transformers.DPRContextEncoderTokenizerFast` is identical to :class:`~transformers.BertTokenizerFast` and
    runs end-to-end tokenization: punctuation splitting and wordpiece.

    Refer to superclass :class:`~transformers.BertTokenizerFast` for usage examples and documentation concerning
    parameters.
    """
    vocab_files_names = ...
    pretrained_vocab_files_map = ...
    max_model_input_sizes = ...
    pretrained_init_configuration = ...
    slow_tokenizer_class = ...


class DPRQuestionEncoderTokenizerFast(BertTokenizerFast):
    r"""
    Constructs a "fast" DPRQuestionEncoder tokenizer (backed by HuggingFace's `tokenizers` library).

    :class:`~transformers.DPRQuestionEncoderTokenizerFast` is identical to :class:`~transformers.BertTokenizerFast` and
    runs end-to-end tokenization: punctuation splitting and wordpiece.

    Refer to superclass :class:`~transformers.BertTokenizerFast` for usage examples and documentation concerning
    parameters.
    """
    vocab_files_names = ...
    pretrained_vocab_files_map = ...
    max_model_input_sizes = ...
    pretrained_init_configuration = ...
    slow_tokenizer_class = ...


DPRSpanPrediction = collections.namedtuple("DPRSpanPrediction", ["span_score", "relevance_score", "doc_id", "start_index", "end_index", "text"])
DPRReaderOutput = collections.namedtuple("DPRReaderOutput", ["start_logits", "end_logits", "relevance_logits"])
CUSTOM_DPR_READER_DOCSTRING = r"""
    Return a dictionary with the token ids of the input strings and other information to give to
    :obj:`.decode_best_spans`.
    It converts the strings of a question and different passages (title and text) in a sequence of IDs (integers),
    using the tokenizer and vocabulary. The resulting :obj:`input_ids` is a matrix of size
    :obj:`(n_passages, sequence_length)` with the format:

        [CLS] <question token ids> [SEP] <titles ids> [SEP] <texts ids>

    Args:
        questions (:obj:`str` or :obj:`List[str]`):
            The questions to be encoded.
            You can specify one question for many passages. In this case, the question will be duplicated like
            :obj:`[questions] * n_passages`.
            Otherwise you have to specify as many questions as in :obj:`titles` or :obj:`texts`.
        titles (:obj:`str` or :obj:`List[str]`):
            The passages titles to be encoded. This can be a string or a list of strings if there are several passages.
        texts (:obj:`str` or :obj:`List[str]`):
            The passages texts to be encoded. This can be a string or a list of strings if there are several passages.
        padding (:obj:`bool`, :obj:`str` or :class:`~transformers.tokenization_utils_base.PaddingStrategy`, `optional`, defaults to :obj:`False`):
            Activates and controls padding. Accepts the following values:

            * :obj:`True` or :obj:`'longest'`: Pad to the longest sequence in the batch (or no padding if only a
              single sequence if provided).
            * :obj:`'max_length'`: Pad to a maximum length specified with the argument :obj:`max_length` or to the
              maximum acceptable input length for the model if that argument is not provided.
            * :obj:`False` or :obj:`'do_not_pad'` (default): No padding (i.e., can output a batch with sequences of
              different lengths).
        truncation (:obj:`bool`, :obj:`str` or :class:`~transformers.tokenization_utils_base.TruncationStrategy`, `optional`, defaults to :obj:`False`):
            Activates and controls truncation. Accepts the following values:

            * :obj:`True` or :obj:`'longest_first'`: Truncate to a maximum length specified with the argument
              :obj:`max_length` or to the maximum acceptable input length for the model if that argument is not
              provided. This will truncate token by token, removing a token from the longest sequence in the pair
              if a pair of sequences (or a batch of pairs) is provided.
            * :obj:`'only_first'`: Truncate to a maximum length specified with the argument :obj:`max_length` or to
              the maximum acceptable input length for the model if that argument is not provided. This will only
              truncate the first sequence of a pair if a pair of sequences (or a batch of pairs) is provided.
            * :obj:`'only_second'`: Truncate to a maximum length specified with the argument :obj:`max_length` or
              to the maximum acceptable input length for the model if that argument is not provided. This will only
              truncate the second sequence of a pair if a pair of sequences (or a batch of pairs) is provided.
            * :obj:`False` or :obj:`'do_not_truncate'` (default): No truncation (i.e., can output batch with
              sequence lengths greater than the model maximum admissible input size).
        max_length (:obj:`int`, `optional`):
                Controls the maximum length to use by one of the truncation/padding parameters.

                If left unset or set to :obj:`None`, this will use the predefined model maximum length if a maximum
                length is required by one of the truncation/padding parameters. If the model has no specific maximum
                input length (like XLNet) truncation/padding to a maximum length will be deactivated.
        return_tensors (:obj:`str` or :class:`~transformers.tokenization_utils_base.TensorType`, `optional`):
                If set, will return tensors instead of list of python integers. Acceptable values are:

                * :obj:`'tf'`: Return TensorFlow :obj:`tf.constant` objects.
                * :obj:`'pt'`: Return PyTorch :obj:`torch.Tensor` objects.
                * :obj:`'np'`: Return Numpy :obj:`np.ndarray` objects.
        return_attention_mask (:obj:`bool`, `optional`):
            Whether or not to return the attention mask. If not set, will return the attention mask according to the
            specific tokenizer's default, defined by the :obj:`return_outputs` attribute.

            `What are attention masks? <../glossary.html#attention-mask>`__

    Return:
        :obj:`Dict[str, List[List[int]]]`: A dictionary with the following keys:

        - ``input_ids``: List of token ids to be fed to a model.
        - ``attention_mask``: List of indices specifying which tokens should be attended to by the model.
        """
@add_start_docstrings(CUSTOM_DPR_READER_DOCSTRING)
class CustomDPRReaderTokenizerMixin:
    def __call__(self, questions, titles: Optional[str] = ..., texts: Optional[str] = ..., padding: Union[bool, str] = ..., truncation: Union[bool, str] = ..., max_length: Optional[int] = ..., return_tensors: Optional[Union[str, TensorType]] = ..., return_attention_mask: Optional[bool] = ..., **kwargs) -> BatchEncoding:
        ...
    
    def decode_best_spans(self, reader_input: BatchEncoding, reader_output: DPRReaderOutput, num_spans: int = ..., max_answer_length: int = ..., num_spans_per_passage: int = ...) -> List[DPRSpanPrediction]:
        """
        Get the span predictions for the extractive Q&A model.
        Outputs: `List` of `DPRReaderOutput` sorted by descending `(relevance_score, span_score)`.
            Each `DPRReaderOutput` is a `Tuple` with:
            **span_score**: ``float`` that corresponds to the score given by the reader for this span compared to other spans
                in the same passage. It corresponds to the sum of the start and end logits of the span.
            **relevance_score**: ``float`` that corresponds to the score of the each passage to answer the question,
                compared to all the other passages. It corresponds to the output of the QA classifier of the DPRReader.
            **doc_id**: ``int``` the id of the passage.
            **start_index**: ``int`` the start index of the span (inclusive).
            **end_index**: ``int`` the end index of the span (inclusive).

        Examples::

            >>> from transformers import DPRReader, DPRReaderTokenizer
            >>> tokenizer = DPRReaderTokenizer.from_pretrained('facebook/dpr-reader-single-nq-base')
            >>> model = DPRReader.from_pretrained('facebook/dpr-reader-single-nq-base')
            >>> encoded_inputs = tokenizer(
            ...         questions=["What is love ?"],
            ...         titles=["Haddaway"],
            ...         texts=["'What Is Love' is a song recorded by the artist Haddaway"],
            ...         return_tensors='pt'
            ...     )
            >>> outputs = model(**encoded_inputs)
            >>> predicted_spans = tokenizer.decode_best_spans(encoded_inputs, outputs)
            >>> print(predicted_spans[0].text)  # best span

        """
        ...
    


@add_end_docstrings(CUSTOM_DPR_READER_DOCSTRING)
class DPRReaderTokenizerFast(CustomDPRReaderTokenizerMixin, BertTokenizerFast):
    r"""
    Constructs a "fast" DPRReader tokenizer (backed by HuggingFace's `tokenizers` library).

    :class:`~transformers.DPRReaderTokenizerFast` is almost identical to :class:`~transformers.BertTokenizerFast` and
    runs end-to-end tokenization: punctuation splitting and wordpiece. The difference is that is has three inputs
    strings: question, titles and texts that are combined to be fed to the :class:`~transformers.DPRReader` model.

    Refer to superclass :class:`~transformers.BertTokenizerFast` for usage examples and documentation concerning
    parameters.

    """
    vocab_files_names = ...
    pretrained_vocab_files_map = ...
    max_model_input_sizes = ...
    pretrained_init_configuration = ...
    model_input_names = ...
    slow_tokenizer_class = ...


